-- Write SQL queries to perform the following tasks using the Sakila database:
USE sakila;
SET sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

-- 1. List the number of films per category.
SELECT c.category_id, name as category_name, COUNT(film_id) as number_of_films
FROM category c
INNER JOIN film_category f
ON c.category_id = f.category_id
GROUP BY category_id;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT * FROM store;
SELECT * FROM address;
SELECT * FROM city;
SELECT * FROM country;

SELECT store_id, city, country
FROM store s
JOIN address a USING(address_id)
JOIN city c USING(city_id)
JOIN country co USING(country_id);

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT * FROM payment;
SELECT * FROM rental;
SELECT * FROM inventory;
SELECT * FROM store;
SELECT * FROM staff;

SELECT DISTINCT store_id, SUM(amount)
FROM store s
JOIN inventory i USING (store_id)
JOIN rental USING(inventory_id)
JOIN payment USING(rental_id)
GROUP BY store_id;

-- 4. Determine the average running time of films for each category.
SELECT * FROM film;
SELECT * from category;

SELECT c.category_id, name as category_name, Round(AVG(length)) as Average_length
FROM category c
INNER JOIN film_category f USING (category_id)
JOIN film USING(film_id)
GROUP BY category_id;

-- Bonus:

-- 5. Identify the film categories with the longest average running time.
SELECT c.category_id, name as category_name, RoundAVG(length) as Average_length
FROM category c
INNER JOIN film_category f USING (category_id)
JOIN film USING(film_id)
GROUP BY category_id
ORDER BY Average_length DESC;

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT * FROM rental;
SELECT * FROM inventory;
SELECT * FROM film;

SELECT film_id, title, COUNT(*) as num_times
FROM rental
JOIN inventory USING (inventory_id)
JOIN film USING (film_id)
GROUP BY film_id
ORDER BY num_times DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT * FROM rental;
SELECT * FROM inventory;
SELECT * FROM store;
SELECT * FROM film;
    
SELECT store_id, (IF(title = 'ACADEMY DINOSAUR', "Yes", "No")) as available
FROM inventory i JOIN film f USING(film_id)
WHERE f.title='ACADEMY DINOSAUR' and store_id = 1
GROUP by store_id;

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating 
-- whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and 
-- this information can be obtained using a CASE statement combined with IFNULL."

SELECT DISTINCT film_id,title,
CASE WHEN inventory_id is NULL THEN 'Not Available'
ELSE "Available"
END AS Availability
FROM film
LEFT JOIN inventory USING (film_id); -- need to do a left join because some film titles are not in inventory